# bot.py ‚Äî –ø–æ–ª–Ω—ã–π —Ñ–∞–π–ª (–∏—é–ª—å 2025)
# ---------------------------------

import asyncio
import logging
import os
import re
from pathlib import Path

from aiogram import Bot, Dispatcher, F
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message
from dotenv import load_dotenv

# ---------- .env ----------
load_dotenv(Path(__file__).with_name(".env"))
TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    raise RuntimeError("BOT_TOKEN not found in .env")

# ---------- bot ----------
bot = Bot(TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

# ---------- –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –º–æ–¥—É–ª–∏ ----------
from keyboards import (
    main_menu, guides_inline_kb, phone_kb, yes_no_kb, calc_button_kb,
    kb_company, kb_timeframe, kb_niche, kb_visas,
    kb_locations, kb_budget_estate, kb_consult_estate, kb_consult_biz, kb_consult_topic,
)
from states import EstateForm, BizForm, ConsultForm
from texts import WELCOME_TEXT, GUIDE_LINKS, FREEZONE_VS_MAINLAND
from sheets import save_lead

# ---------- —Ç–∞—Ä–∏—Ñ—ã –∏ helper-–±–ª–æ–∫ ----------
TARIFFS = dict(
    FZ_base=12_000,
    ML_base=18_000,
    visa=3_500,
    office=5_000,
    bank=4_000,
    vat=0.05,
)


def calc_cost(ctype: str, visas: int, office: bool, bank: bool) -> int:
    cost = TARIFFS[f"{ctype}_base"] + visas * TARIFFS["visa"]
    if office:
        cost += TARIFFS["office"]
    if bank:
        cost += TARIFFS["bank"]
    return int(cost * (1 + TARIFFS["vat"]))


# ================= /start =================
@dp.message(F.text == "/start")
async def cmd_start(message: Message, state: FSMContext):
    await message.answer(WELCOME_TEXT, reply_markup=main_menu)
    await state.clear()


# ================= –≥–∞–π–¥—ã =================
@dp.message(F.text == "üìö –ì–∞–π–¥—ã / –û—à–∏–±–∫–∏")
async def show_guides(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª:", reply_markup=guides_inline_kb)


@dp.callback_query(F.data.in_(GUIDE_LINKS.keys()))
async def send_guide(cb: CallbackQuery):
    link = GUIDE_LINKS.get(cb.data)
    if link:
        await cb.message.answer(f"‚úÖ –í–∞—à —Ñ–∞–π–ª:\n{link}")
    await cb.answer()


# ================= –∫–≤–∏–∑ ¬´–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å¬ª =================
@dp.message(F.text == "üè† –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å")
async def est_start(m: Message, state: FSMContext):
    await m.answer("–í–∞—à –±—é–¥–∂–µ—Ç:", reply_markup=kb_budget_estate)
    await state.set_state(EstateForm.budget)


@dp.message(EstateForm.budget)
async def est_budget(m: Message, state: FSMContext):
    await state.update_data(budget=m.text)
    await m.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é:", reply_markup=kb_locations)
    await state.set_state(EstateForm.location)


@dp.message(EstateForm.location)
async def est_location(m: Message, state: FSMContext):
    await state.update_data(location=m.text)
    await m.answer("–ö–æ–≥–¥–∞ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø–æ–∫—É–ø–∫—É?", reply_markup=kb_timeframe)
    await state.set_state(EstateForm.timeframe)


@dp.message(EstateForm.timeframe)
async def est_timeframe(m: Message, state: FSMContext):
    await state.update_data(timeframe=m.text)
    await m.answer("üìß –û—Å—Ç–∞–≤—å—Ç–µ e-mail:")
    await state.set_state(EstateForm.email)


# ---------- E-MAIL –∏ –¢–ï–õ–ï–§–û–ù (–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å) ----------
EMAIL_RE = re.compile(r"^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$")

@dp.message(EstateForm.email)
async def est_email(m: Message, state: FSMContext):
    if not EMAIL_RE.match(m.text.strip()):
        return await m.answer(
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π e-mail, –Ω–∞–ø—Ä–∏–º–µ—Ä: <code>user@example.com</code>")
    await state.update_data(email=m.text)
    await m.answer("üìû –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º¬ª", reply_markup=phone_kb)
    await state.set_state(EstateForm.phone)


# –ø—Ä–∏–Ω–∏–º–∞–µ–º –¢–û–õ–¨–ö–û contact-–æ–±—ä–µ–∫—Ç
@dp.message(F.contact, EstateForm.phone)
async def est_finish(m: Message, state: FSMContext):
    data = await state.get_data()
    save_lead(
        {"id": m.from_user.id,
         "first_name": m.from_user.first_name,
         "username": m.from_user.username or "",
         "phone": m.contact.phone_number},
        source="estate",
        payload=data,
    )
    await m.answer(
        "üéâ –°–ø–∞—Å–∏–±–æ! –ú—ã –ø–æ–¥–±–µ—Ä—ë–º –ª—É—á—à–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏ —Å–≤—è–∂–µ–º—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
        reply_markup=main_menu)
    await state.clear()
    await m.answer(
    "üóì –•–æ—Ç–∏—Ç–µ –æ–±—Å—É–¥–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –ª–∏—á–Ω–æ? –ó–∞–±—Ä–æ–Ω–∏—Ä—É–π—Ç–µ 30-–º–∏–Ω –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é:",
    reply_markup=kb_consult_estate
)

# –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ü–´–¢–ê–ï–¢–°–Ø –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä —Ä—É–∫–∞–º–∏
@dp.message(~F.contact, EstateForm.phone)
async def est_phone_text(m: Message):
    await m.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´üìû –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º¬ª ‚Äî —Ç–∞–∫ –Ω–æ–º–µ—Ä –ø–µ—Ä–µ–¥–∞—Å—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.",
        reply_markup=phone_kb)


# ================= –∫–≤–∏–∑ ¬´–ë–∏–∑–Ω–µ—Å¬ª =================
@dp.message(F.text == "üè¢ –ë–∏–∑–Ω–µ—Å")
async def biz_intro(m: Message, state: FSMContext):
    await m.answer(FREEZONE_VS_MAINLAND)
    await m.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–º–ø–∞–Ω–∏–∏:", reply_markup=kb_company)
    await state.set_state(BizForm.company_type)


@dp.message(BizForm.company_type)
async def biz_company_type(m: Message, state: FSMContext):
    ctype = "FZ" if "free" in m.text.lower() else "ML"
    await state.update_data(company_type=ctype)
    await m.answer("–ù–∏—à–∞ –±–∏–∑–Ω–µ—Å–∞?", reply_markup=kb_niche)
    await state.set_state(BizForm.niche)


@dp.message(BizForm.niche)
async def biz_niche(m: Message, state: FSMContext):
    await state.update_data(niche=m.text)
    await m.answer("–£—á—Ä–µ–¥–∏—Ç–µ–ª–∏ —É–∂–µ —Ä–µ–∑–∏–¥–µ–Ω—Ç—ã? (–î–∞/–ù–µ—Ç)", reply_markup=yes_no_kb)
    await state.set_state(BizForm.residents)


@dp.message(BizForm.residents)
async def biz_residents(m: Message, state: FSMContext):
    await state.update_data(residents=m.text.lower() == "–¥–∞")
    await m.answer("–°–∫–æ–ª—å–∫–æ –≤–∏–∑ —Ç—Ä–µ–±—É–µ—Ç—Å—è?", reply_markup=kb_visas)
    await state.set_state(BizForm.visas)


# ---------- –≤—ã–±–æ—Ä –≤–∏–∑: inline –∫–Ω–æ–ø–∫–∞ ----------
@dp.callback_query(F.data.startswith("vis_"), BizForm.visas)
async def biz_visas_cb(cb: CallbackQuery, state: FSMContext):
    visas = int(cb.data.split("_")[1])
    await state.update_data(visas=visas)
    await cb.message.edit_reply_markup()
    await cb.message.answer("–ù—É–∂–µ–Ω –æ—Ñ–∏—Å? (–î–∞/–ù–µ—Ç)", reply_markup=yes_no_kb)
    await state.set_state(BizForm.office)
    await cb.answer()


# ---------- –≤—ã–±–æ—Ä –≤–∏–∑: —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥ ----------
@dp.message(BizForm.visas)
async def biz_visas_text(m: Message, state: FSMContext):
    if not m.text.isdigit() or not 0 <= int(m.text) <= 10:
        return await m.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ü–∏—Ñ—Ä—É 0-10 –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ.")
    await state.update_data(visas=int(m.text))
    await m.answer("–ù—É–∂–µ–Ω –æ—Ñ–∏—Å? (–î–∞/–ù–µ—Ç)", reply_markup=yes_no_kb)
    await state.set_state(BizForm.office)


@dp.message(BizForm.office)
async def biz_office(m: Message, state: FSMContext):
    await state.update_data(office=m.text.lower() == "–¥–∞")
    await m.answer("–ù—É–∂–µ–Ω –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —Å—á—ë—Ç? (–î–∞/–ù–µ—Ç)", reply_markup=yes_no_kb)
    await state.set_state(BizForm.corp_account)


@dp.message(BizForm.corp_account)
async def biz_corp_account(m: Message, state: FSMContext):
    await state.update_data(corp_account=m.text.lower() == "–¥–∞")
    await m.answer("üìß –í–∞—à e-mail?")
    await state.set_state(BizForm.email)


@dp.message(BizForm.email)
async def biz_email(m: Message, state: FSMContext):
    if not EMAIL_RE.match(m.text.strip()):
        return await m.answer(
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π e-mail, –Ω–∞–ø—Ä–∏–º–µ—Ä: <code>founder@example.com</code>")
    await state.update_data(email=m.text)
    await m.answer("üìû –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º¬ª", reply_markup=phone_kb)
    await state.set_state(BizForm.phone)

@dp.message(~F.contact, BizForm.phone)
async def biz_phone_text(m: Message):
    await m.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´üìû –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º¬ª –Ω–∏–∂–µ ‚Äî —ç—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ üëç",
        reply_markup=phone_kb)


# ---------- –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä ----------
@dp.callback_query(F.data == "calc_start")
async def calc_start(cb: CallbackQuery, state: FSMContext):
    await cb.message.answer("–°–∫–æ–ª—å–∫–æ –≤–∏–∑? (0-10)", reply_markup=kb_visas)
    await state.set_state("calc_visas")
    await cb.answer()


@dp.callback_query(F.data.startswith("vis_"), F.state == "calc_visas")
async def calc_visas_cb(cb: CallbackQuery, state: FSMContext):
    visas = int(cb.data.split("_")[1])
    await state.update_data(calc_visas=visas)
    await cb.message.edit_reply_markup()
    await cb.message.answer("–ù—É–∂–µ–Ω –æ—Ñ–∏—Å? (–î–∞/–ù–µ—Ç)", reply_markup=yes_no_kb)
    await state.set_state("calc_office")
    await cb.answer()


@dp.message(F.state == "calc_visas")
async def calc_visas_text(m: Message, state: FSMContext):
    if not m.text.isdigit() or not 0 <= int(m.text) <= 10:
        return await m.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ 0-10 –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É.")
    await state.update_data(calc_visas=int(m.text))
    await m.answer("–ù—É–∂–µ–Ω –æ—Ñ–∏—Å? (–î–∞/–ù–µ—Ç)", reply_markup=yes_no_kb)
    await state.set_state("calc_office")


@dp.message(F.state == "calc_office")
async def calc_office(m: Message, state: FSMContext):
    await state.update_data(calc_office=m.text.lower() == "–¥–∞")
    await m.answer("–ù—É–∂–µ–Ω –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —Å—á—ë—Ç? (–î–∞/–ù–µ—Ç)", reply_markup=yes_no_kb)
    await state.set_state("calc_bank")


@dp.message(F.state == "calc_bank")
async def calc_bank(m: Message, state: FSMContext):
    await state.update_data(calc_bank=m.text.lower() == "–¥–∞")
    data = await state.get_data()
    total = calc_cost(
        ctype=data["company_type"],
        visas=data["calc_visas"],
        office=data["calc_office"],
        bank=data["calc_bank"],
    )
    await m.answer(
        f"üí∏ –û—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ª–∏—Ü–µ–Ω–∑–∏–∏: <b>AED {total:,}</b>\n\n"
        "üìû –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º, —á—Ç–æ–±—ã –∑–∞–∫—Ä–µ–ø–∏—Ç—å —Ü–µ–Ω—É ‚Üì",
        reply_markup=phone_kb,
    )
    await state.set_state(BizForm.phone)


@dp.message(F.contact, BizForm.phone)
async def biz_finish(m: Message, state: FSMContext):
    data = await state.get_data()
    save_lead(
        {
            "id": m.from_user.id,
            "first_name": m.from_user.first_name,
            "username": m.from_user.username or "",
            "phone": m.contact.phone_number,
        },
        source="business",
        payload=data,
    )
    await m.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.", reply_markup=main_menu)
    await m.answer(
    "üóì –ó–∞–±—Ä–æ–Ω–∏—Ä—É–π—Ç–µ 30-–º–∏–Ω –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ –±–∏–∑–Ω–µ—Å-setup:",
    reply_markup=kb_consult_biz
)
    await state.clear()


# ================= –∑–∞–ø—É—Å–∫ =================
# ---------- –º–∏–Ω–∏-–∫–≤–∏–∑ ¬´üóì 30-–º–∏–Ω –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è¬ª ----------
@dp.message(F.text == "üóì 30-–º–∏–Ω –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è")
async def consult_start(m: Message, state: FSMContext):
    await m.answer("–û –∫–∞–∫–æ–π —Ç–µ–º–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å?", reply_markup=kb_consult_topic)
    await state.set_state(ConsultForm.topic)

@dp.message(ConsultForm.topic)
async def consult_topic(m: Message, state: FSMContext):
    await state.update_data(topic=m.text)
    await m.answer("–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")
    await state.set_state(ConsultForm.name)

@dp.message(ConsultForm.name)
async def consult_name(m: Message, state: FSMContext):
    await state.update_data(name=m.text)
    await m.answer("üìß –í–∞—à e-mail:")
    await state.set_state(ConsultForm.email)

@dp.message(ConsultForm.email)
async def consult_email(m: Message, state: FSMContext):
    if not EMAIL_RE.match(m.text.strip()):
        return await m.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π e-mail (–ø—Ä–∏–º–µ—Ä user@example.com):")
    await state.update_data(email=m.text)
    await m.answer("üìû –ù–∞–∂–º–∏—Ç–µ ¬´–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º¬ª", reply_markup=phone_kb)
    await state.set_state(ConsultForm.phone)

@dp.message(F.contact, ConsultForm.phone)
async def consult_finish(m: Message, state: FSMContext):
    data = await state.get_data()
    save_lead(
        {"id": m.from_user.id,
         "first_name": m.from_user.first_name,
         "username": m.from_user.username or "",
         "phone": m.contact.phone_number},
        source="consult",
        payload=data,
    )

    topic = data["topic"].lower()
    if "–Ω–µ–¥–≤–∏–∂" in topic:
        kb = kb_consult_estate
    else:
        kb = kb_consult_biz

    await m.answer(
        "üéâ –°–ø–∞—Å–∏–±–æ! –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ:",
        reply_markup=kb
    )
    await state.clear()

@dp.message(ConsultForm.phone)
async def consult_phone_text(m: Message):
    await m.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´üìû –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º¬ª –Ω–∏–∂–µ.", reply_markup=phone_kb)
async def main():
    logging.basicConfig(level=logging.INFO, format="%(levelname)s:%(message)s")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())